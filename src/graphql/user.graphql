type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  phoneSecondary: String
  avatar: File
  licenseNumber: String
  license: File
  birthdate: DateIso!
  birthplace: String!
  addressStreet: String!
  addressZipcode: String!
  addressCity: String!
  studentNumber: String
  isUPS: Boolean!
  deleteMedicalRecord: Boolean!
  isAspirinAllergic: Boolean!
  medicalCertificate: File
  medicalCertificateExpiresAt: DateIso
  insurance: Insurance
  insuranceFile: File
  parentalPermissionFile: File

  levels: [AcquiredLevel!]!
  contacts: [Contact!]!
  vehicles: [Vehicle!]!

  isAdmin: Boolean!
  passwordToken: String
  sessionToken: String!
  newEmail: String
  newEmailToken: String
}

type AcquiredLevel {
  level: Level!
  obtainedAt: DateIso!
  tempFile: File
  file: File
}

type Insurance {
  id: ID!
  name: String!
}

enum VehicleKind {
  CAR
  TRUCK
}

type Vehicle {
  id: ID!
  kind: VehicleKind!
  capacity: Int!
  sleeping: Boolean!
}

type Contact {
  id: ID!
  firstName: String!
  lastName: String!
  phone: String!
  phoneSecondary: String
}

extend type Query {
  users: [User!]!
  user(id: ID): User
}

extend type Mutation {
  login(email: String!, password: String!): User
}
